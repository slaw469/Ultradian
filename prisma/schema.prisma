generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                   @id @default(cuid())
  name                String?
  email               String?                  @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  onboardingCompleted Boolean                  @default(false)
  chronotype          String?
  workStartTime       String?
  workEndTime         String?
  focusBlockDuration  Int                      @default(90)
  breakDuration       Int                      @default(20)
  calendarConnected   Boolean                  @default(false)
  calendarId          String?
  accounts            Account[]
  feedbackLogs        FeedbackLog[]
  focusBlocks         FocusBlock[]
  notifications       Notification[]
  onboardingAnswers   OnboardingQuizResponse[]
  sessions            Session[]
  workSessions        WorkSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FocusBlock {
  id              String        @id @default(cuid())
  userId          String
  startTime       DateTime
  endTime         DateTime
  status          String
  type            String
  calendarEventId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  feedbackLogs    FeedbackLog[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workSessions    WorkSession[]
}

model FeedbackLog {
  id           String     @id @default(cuid())
  userId       String
  focusBlockId String
  energyLevel  Int
  focusLevel   Int
  mood         String
  notes        String?
  createdAt    DateTime   @default(now())
  focusBlock   FocusBlock @relation(fields: [focusBlockId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  type         String
  title        String
  message      String
  read         Boolean   @default(false)
  createdAt    DateTime  @default(now())
  scheduledFor DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OnboardingQuizResponse {
  id        String   @id @default(cuid())
  userId    String
  question  String
  answer    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model WorkSession {
  id           String      @id @default(cuid())
  userId       String
  focusBlockId String?
  title        String
  description  String?
  websiteUrl   String?
  favicon      String?
  domain       String?
  startTime    DateTime
  endTime      DateTime?
  duration     Int?
  tabSwitches  Int         @default(0)
  totalTabs    Int         @default(1)
  activityType String?
  aiSummary    String?
  nextSteps    Json?
  tags         Json?
  aiProcessed  Boolean     @default(false)
  rating       Int?
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  domainTimes  Json?
  focusBlock   FocusBlock? @relation(fields: [focusBlockId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startTime])
  @@index([userId, activityType])
}
