// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Update binary targets to work in WebContainer
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Onboarding and Preferences
  onboardingCompleted Boolean @default(false)
  chronotype         String?  // EARLY_BIRD, NIGHT_OWL, etc.
  workStartTime      String?  // HH:mm format
  workEndTime        String?  // HH:mm format
  focusBlockDuration Int      @default(90)  // in minutes
  breakDuration      Int      @default(20)  // in minutes
  
  // Calendar Integration
  calendarConnected  Boolean  @default(false)
  calendarId         String?
  
  // Relationships
  focusBlocks        FocusBlock[]
  feedbackLogs       FeedbackLog[]
  notifications      Notification[]
  onboardingAnswers  OnboardingQuizResponse[]
  workSessions       WorkSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FocusBlock {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  startTime   DateTime
  endTime     DateTime
  status      String   // PLANNED, IN_PROGRESS, COMPLETED, INTERRUPTED
  type        String   // DEEP_WORK, BREAK
  
  // Calendar Integration
  calendarEventId String?
  
  // Relationships
  feedbackLogs FeedbackLog[]
  workSessions WorkSession[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model FeedbackLog {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  focusBlockId String
  focusBlock   FocusBlock @relation(fields: [focusBlockId], references: [id], onDelete: Cascade)
  
  energyLevel  Int      // 1-5 scale
  focusLevel   Int      // 1-5 scale
  mood         String   // ENERGIZED, FOCUSED, TIRED, DISTRACTED
  notes        String?
  
  createdAt    DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      String   // FOCUS_START, BREAK_START, FOCUS_END
  title     String
  message   String
  read      Boolean  @default(false)
  
  createdAt DateTime @default(now())
  scheduledFor DateTime?
}

// New model for onboarding quiz
model OnboardingQuizResponse {
  id        String   @id @default(cuid())
  userId    String
  question  String
  answer    String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// New model for tracking work session activities
model WorkSession {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  focusBlockId String?
  focusBlock   FocusBlock? @relation(fields: [focusBlockId], references: [id], onDelete: SetNull)
  
  // Session details
  title        String   // Main activity title
  description  String?  // Additional context
  websiteUrl   String?  // Primary website/app URL
  favicon      String?  // Website favicon URL
  domain       String?  // Extracted domain
  startTime    DateTime
  endTime      DateTime?
  duration     Int?     // Duration in minutes
  
  // Activity tracking
  tabSwitches  Int      @default(0)
  totalTabs    Int      @default(1)
  domainTimes  Json?    // Detailed time per domain (from browser extension)
  activityType String?  // CODING, WRITING, RESEARCH, COMMUNICATION, DESIGN, etc.
  
  // AI-generated insights
  aiSummary    String?  // AI-generated session summary
  nextSteps    Json?    // AI-suggested next steps (array of strings)
  tags         Json?    // AI-generated tags (array of strings)
  aiProcessed  Boolean  @default(false)
  
  // User feedback
  rating       Int?     // 1-5 rating
  notes        String?  // User notes
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId, startTime])
  @@index([userId, activityType])
}